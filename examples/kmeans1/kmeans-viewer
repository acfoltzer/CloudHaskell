#!/usr/bin/python

import pygtk
pygtk.require('2.0')
import gtk
import cairo
from gtk import gdk
import random
from math import pi
from sys import argv

class ViewerWidget(gtk.DrawingArea):
	__gsignals__ = {"expose-event":"override"}
	def do_expose_event(self,event):
		cr=self.window.cairo_create()
		cr.rectangle(event.area.x,event.area.y,event.area.width,event.area.height)
		cr.clip()
		self.draw(cr,*self.window.get_size())
	def setdata(self,data):
		self.data=data
	def draw(self,cr,width,height):
		cr.set_source_rgb(0.5,0.5,0.5)
		cr.rectangle(0,0,width,height)
		cr.fill()
		for group in self.data:
			cr.set_source_rgb(*group[0])
			for point in group[1:]:
				#cr.move_to(point[0],point[1])
				cr.arc(point[0], point[1], 2, 0, 2 * pi)
				cr.fill()
				#cr.line_to(point[0]+0.5,point[1]+0.5)
				#cr.stroke()

class Viewer(object):
	def destroy(self,widget):
		gtk.main_quit()
	def filename(self):
		if len(argv)>1:
			return argv[1]
		else:
			return "kmeans-converged"
	def newcolor(self):
		return (random.random(),random.random(),random.random())
	def getdata(self):
		with open(self.filename()) as f:
			groups=[]
			group=[]
			for line in f:
				if len(group)==0:
					group.append(self.newcolor())
				if len(line.split())==0:
					if len(group) > 1:
						groups.append(group)
						group=[]
				else:
					words = line.split()
					pts = []
					for word in words:
						pts.append(float(word))
					group.append(pts)
		return groups		
	def __init__(self):
		self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
		self.window.connect("destroy",self.destroy)
		self.window.set_default_size(900,900)
		widget = ViewerWidget()
		widget.setdata(self.getdata())
		widget.show()
		self.window.add(widget)
		self.window.show()

if __name__ == "__main__":
	viewer = Viewer()
	gtk.main()
